1. **関数display()の実装**: 3x3の行列を2次元配列の引数としてとり，その内容を表示する関数void display()を実装していること
2.**関数det()の実装**: 3x3の行列を2次元配列の引数としてとり，その行列式を求める関数float det()を実装していること
3.**関数trace()の実装**: 3x3の行列を2次元配列の引数としてとり，その対角和を求める関数float trace()を実装していること
4.**関数norm()の実装**: 3x3の行列を2次元配列の引数としてとり，そのユークリッドノルムを求める関数float norm()を実装していること
5. **テストケースの通過**: 配布されたプログラム内のテストケースに対し，正しい出力をしていること．正しい出力とは以下の通りである．
'''
Matrix:
 2.0	-1.0	0.0
-1.0	2.0	-1.0
 0.0	-1.0	-2.0
行列式( det ) =-8.0
対角和( trace ) =2.0
ユークリッドノルム( norm )=4.0

Matrix:
 2.0	2.0	3.0
 1.0	4.0	5.0
 0.0	-1.0	-2.0
行列式( det ) =-5.0
対角和( trace ) =4.0
ユークリッドノルム( norm )=8.0
'''

##補足
- 行列Aのi行目, j列目の要素をA[i][j](0 <= i <=2, 0 <= j <= 2)とするとき，行列式・対角和・ユークリッドノルムの計算式は以下の通りである．forなどのループを用いた場合でも，同等の計算を実現できていれば正答とする．
-- 行列式: A[0][0]*(A[1][1]*A[2][2] - A[1][2]*A[2][1]) - A[0][1]*(A[1][0]*A[2][2] - A[1][2]*A[2][0] + A[0][2]*(A[1][0]*A[2][1] - A[1][1]A[2][0])
-- 対角和: A[0][0] + A[1][1] + A[2][2]
-- ユークリッドノルム: sqrt(A[0][0]^2 + A[0][1]^2 A[0][2]^2 + A[1][0]^2 + A[1][1]^2 A[1][2]^2 + A[2][0]^2 + A[2][1]^2 A[2][2]^2)
- テストケースに対する出力は，小数以下が切り捨てられていても正解とします
- テストケースに変更が加えられている場合は，目視で要件1.〜4.を満たしていれば5.もOKとしてください．